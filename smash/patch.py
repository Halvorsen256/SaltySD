import struct, sys, zlib, os
def b2str(bytes):
    return "".join(map(chr, bytes))
    
def r32(data, pos):
    try:
        return struct.unpack('<I', data.encode('latin-1')[pos:pos+4])[0]
    except:
        return struct.unpack('<I', data[pos:pos+4])[0]
        
def insertreplace(data, to_insert, addr):
    try:
        return data[0:addr] + to_insert + data[addr+len(to_insert):]
    except:
        return data[0:addr] + bytes(to_insert, encoding='latin-1') + data[addr+len(to_insert):]

def readbytes(path):
    try:
        return open(path, 'r', encoding='latin-1', newline="").read().encode('latin-1')
    except TypeError:
        return open(path, 'rb').read()
        
resource_unlock_sig = b2str([0x70, 0x40, 0x2D, 0xE9, 0x00, 0x20, 0xA0, 0xE1, 0xB0, 0x00, 0xD0, 0xE1, 0x18, 0xD0, 0x4D, 0xE2, 0xB0, 0x00, 0xCD, 0xE1, 0x00, 0x10, 0x9D, 0xE5, 0x00, 0x00, 0xA0, 0xE3, 0xB0, 0x00, 0xCD, 0xE1])
resource_lock_sig = b2str([0x00, 0x20, 0xA0, 0xE1, 0x10, 0x40, 0x2D, 0xE9, 0xB0, 0x00, 0xD0, 0xE1, 0x10, 0xD0, 0x4D, 0xE2, 0x01, 0x40, 0xA0, 0xE1, 0xB8, 0x00, 0xCD, 0xE1, 0x08, 0x10, 0x9D, 0xE5, 0x00, 0x00, 0xA0, 0xE3])
resource_lock_sig_legacy = b2str([0x30, 0x40, 0x2D, 0xE9, 0x01, 0x40, 0xA0, 0xE1, 0xB0, 0x10, 0xD0, 0xE1, 0x14, 0xD0, 0x4D, 0xE2, 0xB0, 0x10, 0xCD, 0xE1, 0x00, 0x00, 0x9D, 0xE5, 0x00, 0x08, 0xA0, 0xE1, 0x20, 0x08, 0xB0, 0xE1])
resource_is_exist_sig = b2str([0x04, 0xE0, 0x2D, 0xE5, 0xB0, 0x10, 0xD0, 0xE1, 0x14, 0xD0, 0x4D, 0xE2, 0x00, 0x00, 0xA0, 0xE3, 0xB4, 0x10, 0xCD, 0xE1])
resource_data_size_sig = b2str([0x70, 0x40, 0x2D, 0xE9, 0x18, 0xD0, 0x4D, 0xE2, 0xB0, 0x10, 0xD0, 0xE1, 0x00, 0x00, 0xA0, 0xE3, 0xB0, 0x10, 0xCD, 0xE1, 0x00, 0x30, 0x9D, 0xE5, 0xB0, 0x00, 0xCD, 0xE1, 0x73, 0x30, 0xFF, 0xE6])
resource_data_size_sig_legacy = b2str([0x70, 0x40, 0x2D, 0xE9, 0x01, 0x50, 0xA0, 0xE1, 0x04, 0x10, 0x91, 0xE5, 0x00, 0x60, 0xA0, 0xE1, 0x02, 0x40, 0xA0, 0xE1, 0x00, 0x00, 0x51, 0xE3, 0x18, 0xD0, 0x4D, 0xE2, 0x00, 0x00, 0xA0, 0xE3])
resource_load_sig = b2str([0xF0, 0x43, 0x2D, 0xE9, 0x00, 0x20, 0xA0, 0xE1, 0x14, 0xD0, 0x4D, 0xE2, 0x01, 0x50, 0xA0, 0xE1, 0xB0, 0x00, 0xD0, 0xE1, 0xB0, 0x00, 0xCD, 0xE1, 0x00, 0x10, 0x9D, 0xE5, 0x00, 0x00, 0xA0, 0xE3])
resource_load_sig_legacy = b2str([0xF0, 0x43, 0x2D, 0xE9, 0x01, 0x60, 0xA0, 0xE1, 0x14, 0xD0, 0x4D, 0xE2, 0xB0, 0x10, 0xD0, 0xE1, 0xB0, 0x10, 0xCD, 0xE1, 0x00, 0x00, 0x9D, 0xE5, 0x00, 0x08, 0xA0, 0xE1, 0x20, 0x08, 0xB0, 0xE1])
resource_is_loaded_sig = b2str([0xF0, 0x41, 0x2D, 0xE9, 0x00, 0x20, 0xA0, 0xE1, 0x10, 0xD0, 0x4D, 0xE2, 0xB0, 0x00, 0xD0, 0xE1, 0x01, 0x60, 0xA0, 0xE1, 0xB0, 0x00, 0xCD, 0xE1, 0x00, 0x10, 0x9D, 0xE5, 0x00, 0x00, 0xA0, 0xE3])
resource_is_loaded_sig_legacy = b2str([0xF0, 0x41, 0x2D, 0xE9, 0x10, 0xD0, 0x4D, 0xE2, 0x01, 0x70, 0xA0, 0xE1, 0xB0, 0x10, 0xD0, 0xE1, 0xB0, 0x10, 0xCD, 0xE1, 0x00, 0x00, 0x9D, 0xE5, 0x00, 0x08, 0xA0, 0xE1, 0x20, 0x08, 0xB0, 0xE1])
sdsound_sig = "%s/snd_bgm_%s.nus3bank"

#Make this compatible with Python 2 and 3
try:
    f = open(sys.argv[1], 'r', encoding='latin-1', newline="").read()
except TypeError:
    f = open(sys.argv[1], 'rb').read()
    
lock_hook = readbytes("bin/hooklock.bin")
exist_hook = readbytes("bin/hookexist.bin")
data_size_hook = readbytes("bin/hookdatasize.bin")
lock_payload = readbytes("bin/lock.bin")
data_size_payload = readbytes("bin/datasize.bin")
exist_payload = readbytes("bin/exist.bin")
sdsound = readbytes("bin/sdsound.bin")
    
resource_lock = f.find(resource_lock_sig_legacy if f.find(resource_lock_sig ) == -1 else resource_lock_sig)
resource_is_exist = f.find(resource_is_exist_sig_legacy if f.find(resource_is_exist_sig ) == -1 else resource_is_exist_sig)
resource_is_exist_exit = f.find(b2str([0xD0, 0x8D, 0xE2]), resource_is_exist)-0x1
resource_data_size = f.find(resource_data_size_sig_legacy if f.find(resource_data_size_sig ) == -1 else resource_data_size_sig)
resource_load = f.find(resource_load_sig_legacy if f.find(resource_load_sig ) == -1 else resource_load_sig)
resource_is_loaded = f.find(resource_is_loaded_sig_legacy if f.find(resource_is_loaded_sig ) == -1 else resource_is_loaded_sig)
sdsound_func_addr = f.find(sdsound_sig)-0x4

lock_hook_addr = resource_lock+(0x4 if f.find(resource_lock_sig) == -1 else 0x8)
exist_hook_addr = resource_is_exist+0x4
data_size_hook_addr = resource_data_size+0x4

# TODO: Scan for these
lock_payload_addr = 0xA3B800-0x100000
data_size_payload_addr = 0xA3C800-0x100000
exist_payload_addr = 0xA3E800-0x100000
sdsound_addr = 0xA3D800-0x100000

# Just convert f to bytes now that we're done searching things.
try:
    f = f.encode('latin-1')
except:
    f = f

w = open(os.path.splitext(sys.argv[1])[0]+"_saltysd.bin", 'w+b')
f = insertreplace(f,lock_hook,lock_hook_addr)
f = insertreplace(f,exist_hook,exist_hook_addr)
f = insertreplace(f,data_size_hook,data_size_hook_addr)

f = insertreplace(f,lock_payload,lock_payload_addr)
f = insertreplace(f,exist_payload,exist_payload_addr)
f = insertreplace(f,data_size_payload,data_size_payload_addr)
f = insertreplace(f,sdsound,sdsound_addr)

f = insertreplace(f,b2str([0x70, 0x40, 0x2D, 0xE9]), resource_is_exist)
f = insertreplace(f,b2str([0x70, 0x80, 0xBD, 0xE8]), resource_is_exist_exit+0x4)

f = insertreplace(f,b2str([0x1E, 0xFF, 0x2F, 0xE1]), resource_load)
f = insertreplace(f,b2str([0x01, 0x00, 0xA0, 0xE3]), resource_is_loaded)
f = insertreplace(f,b2str([0x1E, 0xFF, 0x2F, 0xE1]), resource_is_loaded+0x4)

# This should be a pointer, if it isn't this is likely a pre-update version or Demo.
if(r32(f,sdsound_func_addr+0x1C) & 0xFF000000 != 0):
    print("This is likely a version of Smash which doesn't utilize update data (1.0.1, Demo)!\nSound override is not supported with these versions.")
    w.write(f)
    exit(0)
    
orig_ptr = r32(f,sdsound_func_addr)
f = insertreplace(f,struct.pack('<I', orig_ptr),sdsound_func_addr+0x1C)
f = insertreplace(f,struct.pack('<I', sdsound_addr+0x100000),sdsound_func_addr)
w.write(f)

